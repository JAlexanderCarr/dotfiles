# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;
esac

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# provide git branch
git_branch() {
        branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /')
    if [ "$branch" == "" ]; then
        echo ""
    else
        echo " ${branch}"
    fi
    unset branch
}

# provide kube namespace and context
k8s_info() {
    kube=$(kubectl config view --minify --output 'jsonpath={.current-context}:{..namespace}' 2> /dev/null)
    if [ "$kube" == "" ]; then
        echo ""
    else
        echo "󰠳 ${kube} "
    fi
    unset kube
}

# adding runtime of previous command to prompt
function timer_start() {
    start_time=$(date +%s%3N)
}

function timer_stop() {
    end_time=$(date +%s%3N)
    timer_show=$(( end_time - start_time ))
}

trap 'timer_start' DEBUG

if [ "$PROMPT_COMMAND" == "" ]; then
  PROMPT_COMMAND="timer_stop"
else
  PROMPT_COMMAND="$PROMPT_COMMAND; timer_stop"
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    compensate=7
    PS1="`printf "%*s\r%s\n%s " "$((${COLUMNS}+${compensate}))" "\[\033[00;37m\]\D{%r}" '${debian_chroot:+($debian_chroot)}\[\033[00;33m\]$(git_branch)\[\033[00;34m\]$(k8s_info)\[\033[00;32m\]\u@\h\[\033[00;37m\]:\[\033[00;35m\]\w\[\033[00;37m\] ${timer_show}ms' "$\[\033[00;00m\]"`"
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt compensate

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
   . /etc/bash_completion
fi


# # setting the font
# sudo setfont fira-nerd

# # WSL Only
# sudo hwclock -s
